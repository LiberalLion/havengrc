sequence_diagram.puml
@startuml

actor Browser
boundary gatekeeper
entity caddy
control Keycloak
entity PostgREST
entity HavenAPI
database PostgreSQL
entity worker

"Browser" -> "gatekeeper": load single page app from /
"gatekeeper" -> "caddy": serve files from container
"Browser" <-- "caddy"

alt Not logged in
    "Browser" -> "gatekeeper": /oauth/token to read current user data
    "Browser" <- "gatekeeper": Unauthorized response, WebUI renders outside view
    note left
        HTTP/1.1 401 UNAUTHORIZED
        Content-Type: application/json
        WebUI renders logged-out view
    end note

else Currently logged in (cookie)
    "Browser" -> "gatekeeper": /oauth/token to read current user data
    "Browser" <- "gatekeeper": JWT data including username and user ID
    note left
        HTTP/1.1 2XX
        Content-Type: application/json
        WebUI renders logged-in view
    end note
end

"Browser" -> "gatekeeper": access protected url while logged out
"Browser" <- "gatekeeper": redirect to keycloak login
"Browser" ---> "Keycloak": auth/realms/havendev/protocol/openid-connect/auth
activate "Keycloak"

"Keycloak" -> "Keycloak": map roles and issue tokens

"Browser" <--- "Keycloak": Authentication response
"Browser" -> "gatekeeper": oauth/callback
"gatekeeper" -> "gatekeeper": save JWT, set cookie
deactivate "Keycloak"
note right
    Gatekeeper will exchange the cookie
    for a JWT on requests, placing the
    JWT in the Authorization: header
    Elm webui just makes HTTP requests
    and the browser transparently includes
    the cookie for auth with the XHR
end note


...

"Browser" --> "PostgREST": /api/survey_questions
"PostgREST" -> "PostgreSQL": autogenerated REST API "1" schema
note left
    PostgREST assumes member role based on JWT
    Some APIs are public readable, such as survey questions
end note
"Browser" <-- "PostgREST": data for rendering survey questions

"Browser" --> "HavenAPI": /api/registration_funnel
"HavenAPI" -> "PostgreSQL": custom business logic REST API
note left
    Buffalo assumes member role based on JWT
    One API is public writable, requests for
    new user registration
end note
"HavenAPI" <- "PostgreSQL": confirmation of registration
"Browser" <-- "HavenAPI": confirmation of new registration request

"worker" -> "PostgreSQL": poll for new jobs
"worker" --> "Keycloak": create new user
"worker" <-- "Keycloak"
"worker" --> "HavenAPI": save user report
"HavenAPI" -> "PostgreSQL"
"HavenAPI" <- "PostgreSQL"
"worker" <-- "HavenAPI"


@endum
sequence_diagram.puml