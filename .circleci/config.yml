version: 2.1
commands:
  notify-failed:
    description: "Slack notification of failed job"
    steps:
      - run:
          name: notify failed job
          command: ./notify-slack notifications "CircleCI pipeline for ${CIRCLE_PULL_REQUEST:-$CIRCLE_BRANCH} failed in $CIRCLE_JOB $CIRCLE_BUILD_URL" circleci
          when: on_fail
jobs:
  webui-build-job:
    docker:
      - image: circleci/node:7-browsers
    steps:
      - checkout
      - run:
          name: notify build started
          command: ./notify-slack notifications "CircleCI starting pipeline for ${CIRCLE_PULL_REQUEST:-$CIRCLE_BRANCH}" circleci
      - add_ssh_keys
      - run:
          name: Check services to build
          command: |
            source ./report-changed-services
            if [ "$DEPLOY_WEBUI" = "false" ]; then
              circleci-agent step halt
            fi
      - run:
          name: Check docker version
          command: docker -v
      - restore_cache:
          key: sysconfcpu
      - run:
          name: Install sysconfcpus
          command: |
            if [ ! -d $HOME/sysconfcpus/bin ];
            then
              git clone https://github.com/obmarg/libsysconfcpus.git;
              cd libsysconfcpus;
              ./configure --prefix="$HOME/sysconfcpus";
              make && make install;
              cd ..;
            fi
      - save_cache:
          key: sysconfcpu
          paths:
            - ../sysconfcpus
      - restore_cache:
          key: dependency-cache-{{ checksum "webui/package.json" }}
      - run:
          name: Install Elm system with npm
          command: npm install --only=dev
          no_output_timeout: 15m
          working_directory: webui
      - save_cache:
          key: dependency-cache-{{ checksum "webui/elm.json" }}
          paths:
            - ./webui/node_modules
      - run:
          name: compile Elm project
          command: $HOME/sysconfcpus/bin/sysconfcpus -n 2 npm run-script build
          no_output_timeout: 20m
          working_directory: webui
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker build -t kindlyops/havenweb:latest webui
      - run: docker tag kindlyops/havenweb:latest kindlyops/havenweb:$CIRCLE_SHA1
      - run: docker tag kindlyops/havenweb:latest kindlyops/havenweb:$CIRCLE_BUILD_NUM
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker push kindlyops/havenweb:$CIRCLE_SHA1
      - run: docker push kindlyops/havenweb:$CIRCLE_BUILD_NUM
      - run: |
          if [ "$CIRCLE_BRANCH" = "master" ]; then
            docker push kindlyops/havenweb:latest
          fi
      - notify-failed
  flyway-build-job:
    docker:
      - image: circleci/openjdk:9
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: Check services to build
          command: |
            source ./report-changed-services
            if [ "$DEPLOY_FLYWAY" = "false" ]; then
              circleci-agent step halt
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker build -t kindlyops/havenflyway:latest flyway
      - run: docker tag kindlyops/havenflyway:latest kindlyops/havenflyway:$CIRCLE_SHA1
      - run: docker tag kindlyops/havenflyway:latest kindlyops/havenflyway:$CIRCLE_BUILD_NUM
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker push kindlyops/havenflyway:$CIRCLE_SHA1
      - run: docker push kindlyops/havenflyway:$CIRCLE_BUILD_NUM
      - run: |
          if [ "$CIRCLE_BRANCH" = "master" ]; then
            docker push kindlyops/havenflyway:latest
          fi
      - notify-failed

  postgrest-build-job:
    docker:
      - image: circleci/openjdk:9
    steps:
      - checkout
      - add_ssh_keys
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker build -t kindlyops/postgrest:latest -f postgrest/Dockerfile .
      - run: docker tag kindlyops/postgrest:latest kindlyops/postgrest:$CIRCLE_SHA1
      - run: docker tag kindlyops/postgrest:latest kindlyops/postgrest:$CIRCLE_BUILD_NUM
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker push kindlyops/postgrest:$CIRCLE_SHA1
      - run: docker push kindlyops/postgrest:$CIRCLE_BUILD_NUM
      - run: |
          if [ "$CIRCLE_BRANCH" = "master" ]; then
            docker push kindlyops/postgrest:latest
          fi
      - notify-failed
  keycloak-build-job:
    docker:
      - image: circleci/openjdk:9
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: Check services to build
          command: |
            source ./report-changed-services
            if [ "$DEPLOY_KEYCLOAK" = "false" ]; then
              circleci-agent step halt
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker build -t kindlyops/keycloak:latest -f keycloak/Dockerfile .
      - run: docker tag kindlyops/keycloak:latest kindlyops/keycloak:$CIRCLE_SHA1
      - run: docker tag kindlyops/keycloak:latest kindlyops/keycloak:$CIRCLE_BUILD_NUM
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker push kindlyops/keycloak:$CIRCLE_SHA1
      - run: docker push kindlyops/keycloak:$CIRCLE_BUILD_NUM
      - run: |
          if [ "$CIRCLE_BRANCH" = "master" ]; then
            docker push kindlyops/keycloak:latest
          fi
      - notify-failed
  havenapi-build-job:
    docker:
      - image: circleci/node:7-browsers
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: Check services to build
          command: |
            source ./report-changed-services
            if [ "$DEPLOY_HAVENAPI" = "false" ]; then
              circleci-agent step halt
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker build --rm=false -t kindlyops/havenapi havenapi
      - run: docker tag kindlyops/havenapi:latest kindlyops/havenapi:$CIRCLE_SHA1
      - run: docker tag kindlyops/havenapi:latest kindlyops/havenapi:$CIRCLE_BUILD_NUM
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker push kindlyops/havenapi:$CIRCLE_BUILD_NUM
      - run: docker push kindlyops/havenapi:$CIRCLE_SHA1
      - run: |
          if [ "$CIRCLE_BRANCH" = "master" ]; then
            docker push kindlyops/havenapi:latest
          fi
      - notify-failed
  gatekeeper-build-job:
    docker:
      - image: circleci/node:7-browsers
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: Check services to build
          command: |
            source ./report-changed-services
            if [ "$DEPLOY_GATEKEEPER" = "false" ]; then
              circleci-agent step halt
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker build --rm=false -t kindlyops/gatekeeper gatekeeper
      - run: docker tag kindlyops/gatekeeper:latest kindlyops/gatekeeper:$CIRCLE_SHA1
      - run: docker tag kindlyops/gatekeeper:latest kindlyops/gatekeeper:$CIRCLE_BUILD_NUM
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker push kindlyops/gatekeeper:$CIRCLE_BUILD_NUM
      - run: docker push kindlyops/gatekeeper:$CIRCLE_SHA1
      - run: |
          if [ "$CIRCLE_BRANCH" = "master" ]; then
            docker push kindlyops/gatekeeper:latest
          fi
      - notify-failed
  havenworker-build-job:
    docker:
      - image: circleci/node:7-browsers
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: Check services to build
          command: |
            source ./report-changed-services
            if [ "$DEPLOY_WORKER" = "false" ]; then
              circleci-agent step halt
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker build --build-arg=COMMIT=$CIRCLE_SHA1 --rm=false -t kindlyops/havenworker -f worker/Dockerfile .
      - run: docker tag kindlyops/havenworker:latest kindlyops/havenworker:$CIRCLE_SHA1
      - run: docker tag kindlyops/havenworker:latest kindlyops/havenworker:$CIRCLE_BUILD_NUM
      - run: docker build --rm=false -t kindlyops/faktory -f faktory/Dockerfile .
      - run: docker tag kindlyops/faktory:latest kindlyops/faktory:$CIRCLE_SHA1
      - run: docker tag kindlyops/faktory:latest kindlyops/faktory:$CIRCLE_BUILD_NUM
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker push kindlyops/havenworker:$CIRCLE_BUILD_NUM
      - run: docker push kindlyops/havenworker:$CIRCLE_SHA1
      - run: docker push kindlyops/havenworker:latest
      - run: docker push kindlyops/faktory:$CIRCLE_BUILD_NUM
      - run: docker push kindlyops/faktory:$CIRCLE_SHA1
      - run: |
          if [ "$CIRCLE_BRANCH" = "master" ]; then
            docker push kindlyops/faktory:latest
          fi
      - notify-failed
  havenapi-testing-job:
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout
      - add_ssh_keys
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run e2e tests
          command: ./e2e-tests.sh
      - run:
          name: save cypress logs
          when: always
          command: |
            docker cp videos:/e2e/cypress/videos ./webui/cypress/videos
      - store_artifacts:
          path: webui/cypress/videos
      - run:
          name: Cleanup e2e tests
          command: ./e2e-tests-cleanup.sh
      - notify-failed
      - run:
          name: notify tests complete
          command: ./notify-slack notifications "CircleCI tests completed successfully for ${CIRCLE_PULL_REQUEST:-$CIRCLE_BRANCH}" circleci
          when: on_success
  deploy-staging:
    docker:
      - image: circleci/ruby:2.4
    steps:
      - checkout
      - add_ssh_keys
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install OpenShift client
          command: |
            wget https://github.com/openshift/origin/releases/download/v3.7.0/openshift-origin-client-tools-v3.7.0-7ed6862-linux-64bit.tar.gz
            tar xvzf openshift-origin-client-tools-v3.7.0-7ed6862-linux-64bit.tar.gz
            sudo mv openshift-origin-client-tools-v3.7.0-7ed6862-linux-64bit/oc /usr/local/bin/oc
            oc version
            # todo: authenticate
            oc login https://api.pro-us-east-1.openshift.com --token=$OPENSHIFT_TOKEN
            # this url suddenly started saying the only project available was mo1w
            #oc login https://console.pro-us-east-1.openshift.com/ --token=$OPENSHIFT_TOKEN
            oc project haven-production
      - run:
          name: Install Sentry CLI
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
      - deploy:
          name: Prerelease
          command: |
            VERSION=$(sentry-cli releases propose-version)
            # Create a release
            sentry-cli releases new -p haven-grc $VERSION
            # Associate commits with the release
            sentry-cli releases set-commits --auto $VERSION || true
            # figure out which services need deploys
            source ./report-changed-services
            if [[ "$DEPLOY_HAVENAPI" == "true" ]]; then
              oc set image deployment/havenapi havenapi=havengrc-docker.jfrog.io/kindlyops/havenapi:$CIRCLE_SHA1
            fi
            if [[ "$DEPLOY_WEBUI" == "true" ]]; then
              oc set image deployment/havenweb havenweb=havengrc-docker.jfrog.io/kindlyops/havenweb:$CIRCLE_SHA1
            fi
            if [[ "$DEPLOY_KEYCLOAK" == "true" ]]; then
              oc set image deployment/keycloak keycloak=havengrc-docker.jfrog.io/kindlyops/keycloak:$CIRCLE_SHA1
            fi
            if [[ "$DEPLOY_WORKER" == "true" ]]; then
              oc set image deployment/worker worker=kindlyops/havenworker:$CIRCLE_SHA1
            fi
            if [[ "$DEPLOY_GATEKEEPER" == "true" ]]; then
              oc set image deployment/gatekeeper gatekeeper=kindlyops/gatekeeper:$CIRCLE_SHA1
            fi
      - notify-failed
      - run:
          name: notify deploy complete
          command: ./notify-slack notifications "CircleCI completed deploy for ${CIRCLE_PULL_REQUEST:-$CIRCLE_BRANCH}" circleci
          when: on_success
workflows:
  version: 2
  builds:
    jobs:
      - webui-build-job
      - flyway-build-job
      - keycloak-build-job
      - havenapi-build-job
      - havenworker-build-job
      - gatekeeper-build-job
      - postgrest-build-job
      - havenapi-testing-job:
          requires:
            - flyway-build-job
            - keycloak-build-job
            - havenapi-build-job
            - postgrest-build-job
            - gatekeeper-build-job
            - webui-build-job
      - deploy-staging:
          requires:
            - havenapi-testing-job
            - webui-build-job
          filters:
            branches:
              only: master
